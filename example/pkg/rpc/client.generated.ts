/**
 * ⚠️  DO NOT EDIT THIS FILE - IT IS AUTO-GENERATED ⚠️
 * 
 * Auto-generated client functions from define.ts
 * These functions allow CLIENT to call SERVER functions (ServerFunctions interface)
 * and set up handlers for CLIENT functions (ClientFunctions interface)
 *
 * To regenerate this file, run:
 * bunx socketrpc-gen /Volumes/Data/Projects/socket-rpc/example/pkg/rpc/define.ts
 */

import type { Socket } from "socket.io-client";
import type { RpcError, UnsubscribeFunction } from "./types.generated";
import type { GetPlanRequest, Plan } from "./define";

// === CLIENT HANDLER TYPES ===
/** Handler type for processing 'showError' events from server */
export type ShowErrorHandler = (error: Error) => Promise<void>;
/** Handler type for processing 'updateDiscoveriedUrls' events from server */
export type UpdateDiscoveriedUrlsHandler = (url: string) => Promise<void>;
/** Handler type for processing 'getBrowserVersion' events from server */
export type GetBrowserVersionHandler = () => Promise<string | RpcError>;

// === CLIENT CALLING SERVER FUNCTIONS ===
/**
 * CLIENT calls SERVER: Emits 'generateText' event to server with acknowledgment. Includes built-in error handling.
 * @param {Socket} socket The socket instance for communication.
 * @param {string} prompt
 * @param {number} timeout The timeout for the acknowledgment in milliseconds.
 * @returns {Promise<string | RpcError>} A promise that resolves with the result from the server, or an RpcError if one occurred.
 */
export async function generateText(socket: Socket, prompt: string, timeout: number = 5000): Promise<string | RpcError> {
    try {
        return await socket.timeout(timeout).emitWithAck('generateText', prompt);
    } catch (err) {
        return { message: err instanceof Error ? err.message : String(err), code: 'INTERNAL_ERROR', data: undefined };
    }
}

/**
 * CLIENT calls SERVER: Emits 'getPlan' event to server with acknowledgment. Includes built-in error handling.
 * @param {Socket} socket The socket instance for communication.
 * @param {GetPlanRequest} request
 * @param {number} timeout The timeout for the acknowledgment in milliseconds.
 * @returns {Promise<Plan | RpcError>} A promise that resolves with the result from the server, or an RpcError if one occurred.
 */
export async function getPlan(socket: Socket, request: GetPlanRequest, timeout: number = 5000): Promise<Plan | RpcError> {
    try {
        return await socket.timeout(timeout).emitWithAck('getPlan', request);
    } catch (err) {
        return { message: err instanceof Error ? err.message : String(err), code: 'INTERNAL_ERROR', data: undefined };
    }
}

// === CLIENT HANDLER FUNCTIONS ===
/**
 * Sets up listener for 'showError' events from server. Returns a function to remove the listener.
 * @param {Socket} socket The socket instance for communication.
 * @param {ShowErrorHandler} handler The handler function to process incoming events.
 * @returns {UnsubscribeFunction} A function that removes the event listener when called
 */
export function handleShowError(socket: Socket, handler: ShowErrorHandler): UnsubscribeFunction {
    const listener = async (error: Error) => {
        try {
            await handler(error);
        } catch (error) {
            console.error('[showError] Handler error:', error);
            socket.emit('rpcError', { message: error instanceof Error ? error.message : 'Unknown error' } as RpcError);
        }
    };
    socket.on('showError', listener);
    return () => socket.off('showError', listener);
}

/**
 * Sets up listener for 'updateDiscoveriedUrls' events from server. Returns a function to remove the listener.
 * @param {Socket} socket The socket instance for communication.
 * @param {UpdateDiscoveriedUrlsHandler} handler The handler function to process incoming events.
 * @returns {UnsubscribeFunction} A function that removes the event listener when called
 */
export function handleUpdateDiscoveriedUrls(socket: Socket, handler: UpdateDiscoveriedUrlsHandler): UnsubscribeFunction {
    const listener = async (url: string) => {
        try {
            await handler(url);
        } catch (error) {
            console.error('[updateDiscoveriedUrls] Handler error:', error);
            socket.emit('rpcError', { message: error instanceof Error ? error.message : 'Unknown error' } as RpcError);
        }
    };
    socket.on('updateDiscoveriedUrls', listener);
    return () => socket.off('updateDiscoveriedUrls', listener);
}

/**
 * Sets up listener for 'getBrowserVersion' events from server with acknowledgment. Returns a function to remove the listener.
 * @param {Socket} socket The socket instance for communication.
 * @param {GetBrowserVersionHandler} handler The handler function to process incoming events.
 * @returns {UnsubscribeFunction} A function that removes the event listener when called
 */
export function handleGetBrowserVersion(socket: Socket, handler: GetBrowserVersionHandler): UnsubscribeFunction {
    const listener = async (callback: (result: string | RpcError) => void) => {
        try {
            const result = await handler();
            callback(result);
        } catch (error) {
            console.error('[getBrowserVersion] Handler error:', error);
            socket.emit('rpcError', { message: error instanceof Error ? error.message : 'Unknown error' } as RpcError);
            callback({ message: error instanceof Error ? error.message : 'Unknown error' } as RpcError);
        }
    };
    socket.on('getBrowserVersion', listener);
    return () => socket.off('getBrowserVersion', listener);
}

/**
 * Sets up listener for 'rpcError' events with async/await and try-catch. This handler is called whenever an RPC error occurs during function execution. Returns a function to remove the listener.
 * @param {Socket} socket The socket instance for communication.
 * @param {(error: RpcError) => Promise<void>} handler The handler function to process incoming events.
 * @returns {UnsubscribeFunction} A function that removes the event listener when called
 */
export function handleRpcError(socket: Socket, handler: (error: RpcError) => Promise<void>): UnsubscribeFunction {
    const listener = async (error: RpcError) => {
        try {
            await handler(error);
        } catch (handlerError) {
            console.error('[handleRpcError] Error in RPC error handler:', handlerError);
        }
    };
    socket.on('rpcError', listener);
    return () => socket.off('rpcError', listener);
}
