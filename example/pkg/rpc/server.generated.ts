/**
 * ⚠️  DO NOT EDIT THIS FILE - IT IS AUTO-GENERATED ⚠️
 *
 * Auto-generated server functions from define.ts
 * These functions allow SERVER to call CLIENT functions (ClientFunctions interface)
 * and set up handlers for SERVER functions (ServerFunctions interface)
 *
 * To regenerate this file, run:
 * bunx socketrpc-gen /Volumes/Data/Projects/socket-rpc/example/pkg/rpc/define.ts
 */

import type { Socket } from "socket.io";
import type { RpcError, UnsubscribeFunction } from "./types.generated";
import type { GetPlanRequest, Plan } from "./define";

// === SERVER HANDLER TYPES ===
/** Handler type for processing 'generateText' events from client */
export type GenerateTextHandler = (socket: Socket, prompt: string) => Promise<string | RpcError>;
/** Handler type for processing 'getPlan' events from client */
export type GetPlanHandler = (socket: Socket, request: GetPlanRequest) => Promise<Plan | RpcError>;

// === SERVER CALLING CLIENT FUNCTIONS ===
/**
 * SERVER calls CLIENT: Emits 'showError' event to client without acknowledgment. Includes built-in error handling.
 * @param {Socket} socket The socket instance for communication.
 * @param {Error} error
 */
export function showError(socket: Socket, error: Error): void {
    socket.emit('showError', error);
}

/**
 * SERVER calls CLIENT: Emits 'updateDiscoveriedUrls' event to client without acknowledgment. Includes built-in error handling.
 * @param {Socket} socket The socket instance for communication.
 * @param {string} url
 */
export function updateDiscoveriedUrls(socket: Socket, url: string): void {
    socket.emit('updateDiscoveriedUrls', url);
}

/**
 * SERVER calls CLIENT: Emits 'getBrowserVersion' event to client with acknowledgment. Includes built-in error handling.
 * @param {Socket} socket The socket instance for communication.
 * @param {number} timeout The timeout for the acknowledgment in milliseconds.
 * @returns {Promise<string | RpcError>} A promise that resolves with the result from the client, or an RpcError if one occurred.
 */
export async function getBrowserVersion(socket: Socket, timeout: number = 5000): Promise<string | RpcError> {
    try {
        return await socket.timeout(timeout).emitWithAck('getBrowserVersion');
    } catch (err) {
        return { message: err instanceof Error ? err.message : String(err), code: 'INTERNAL_ERROR', data: undefined };
    }
}

// === SERVER HANDLER FUNCTIONS ===
/**
 * Sets up listener for 'generateText' events from client with acknowledgment. Returns a function to remove the listener.
 * @param {Socket} socket The socket instance for communication.
 * @param {GenerateTextHandler} handler The handler function to process incoming events.
 * @returns {UnsubscribeFunction} A function that removes the event listener when called
 */
export function handleGenerateText(socket: Socket, handler: GenerateTextHandler): UnsubscribeFunction {
    const listener = async (prompt: string, callback: (result: string | RpcError) => void) => {
        try {
            const result = await handler(socket, prompt);
            callback(result);
        } catch (error) {
            console.error('[generateText] Handler error:', error);
            callback({ message: error instanceof Error ? error.message : String(error), code: 'INTERNAL_ERROR', data: undefined });
        }
    };
    socket.on('generateText', listener);
    return () => socket.off('generateText', listener);
}

/**
 * Sets up listener for 'getPlan' events from client with acknowledgment. Returns a function to remove the listener.
 * @param {Socket} socket The socket instance for communication.
 * @param {GetPlanHandler} handler The handler function to process incoming events.
 * @returns {UnsubscribeFunction} A function that removes the event listener when called
 */
export function handleGetPlan(socket: Socket, handler: GetPlanHandler): UnsubscribeFunction {
    const listener = async (request: GetPlanRequest, callback: (result: Plan | RpcError) => void) => {
        try {
            const result = await handler(socket, request);
            callback(result);
        } catch (error) {
            console.error('[getPlan] Handler error:', error);
            callback({ message: error instanceof Error ? error.message : String(error), code: 'INTERNAL_ERROR', data: undefined });
        }
    };
    socket.on('getPlan', listener);
    return () => socket.off('getPlan', listener);
}

/**
 * Sets up listener for 'rpcError' events with async/await and try-catch. This handler is called whenever an RPC error occurs during function execution. Returns a function to remove the listener.
 * @param {Socket} socket The socket instance for communication.
 * @param {(socket: Socket, error: RpcError) => Promise<void>} handler The handler function to process incoming events.
 * @returns {UnsubscribeFunction} A function that removes the event listener when called
 */
export function handleRpcError(socket: Socket, handler: (socket: Socket, error: RpcError) => Promise<void>): UnsubscribeFunction {
    const listener = async (error: RpcError) => {
        try {
            await handler(socket, error);
        } catch (handlerError) {
            console.error('[handleRpcError] Error in RPC error handler:', handlerError);
        }
    };
    socket.on('rpcError', listener);
    return () => socket.off('rpcError', listener);
}
