/**
 * ⚠️  DO NOT EDIT THIS FILE - IT IS AUTO-GENERATED ⚠️
 * 
 * Auto-generated client functions from define.ts
 * These functions allow CLIENT to call SERVER functions (ServerFunctions interface)
 * and set up handlers for CLIENT functions (ClientFunctions interface)
 *
 * To regenerate this file, run:
 * bunx socketrpc-gen /Volumes/Data/Projects/socket-rpc/examples/01-basic/define.ts
 */

import type { Socket } from "socket.io-client";
import type { RpcError, UnsubscribeFunction } from "./types.generated";
import type { User } from "./define";

// === CLIENT HANDLER TYPES ===
/** Handler type for processing 'onMessage' events from server */
export type OnMessageHandler = (socket: Socket, message: string) => Promise<void>;
/** Handler type for processing 'requestConfirmation' events from server */
export type RequestConfirmationHandler = (socket: Socket, prompt: string) => Promise<boolean | RpcError>;

// === CLIENT CALLING SERVER FUNCTIONS ===
/**
 * CLIENT calls SERVER: Emits 'getUser' event to server with acknowledgment. Includes built-in error handling.
 * @param {Socket} socket The socket instance for communication.
 * @param {string} userId
 * @param {number} timeout The timeout for the acknowledgment in milliseconds.
 * @returns {Promise<User | RpcError>} A promise that resolves with the result from the server, or an RpcError if one occurred.
 */
export async function getUser(socket: Socket, userId: string, timeout: number = 5000): Promise<User | RpcError> {
    try {
        return await socket.timeout(timeout).emitWithAck('getUser', userId);
    } catch (err) {
        return { message: err instanceof Error ? err.message : String(err), code: 'INTERNAL_ERROR', data: undefined };
    }
}

/**
 * CLIENT calls SERVER: Emits 'createUser' event to server with acknowledgment. Includes built-in error handling.
 * @param {Socket} socket The socket instance for communication.
 * @param {string} name
 * @param {string} email
 * @param {number} timeout The timeout for the acknowledgment in milliseconds.
 * @returns {Promise<User | RpcError>} A promise that resolves with the result from the server, or an RpcError if one occurred.
 */
export async function createUser(socket: Socket, name: string, email: string, timeout: number = 5000): Promise<User | RpcError> {
    try {
        return await socket.timeout(timeout).emitWithAck('createUser', name, email);
    } catch (err) {
        return { message: err instanceof Error ? err.message : String(err), code: 'INTERNAL_ERROR', data: undefined };
    }
}

/**
 * CLIENT calls SERVER: Emits 'deleteUser' event to server without acknowledgment. Includes built-in error handling.
 * @param {Socket} socket The socket instance for communication.
 * @param {string} userId
 */
export function deleteUser(socket: Socket, userId: string): void {
    socket.emit('deleteUser', userId);
}

// === CLIENT HANDLER FUNCTIONS ===
/**
 * Sets up listener for 'onMessage' events from server. Returns a function to remove the listener.
 * @param {Socket} socket The socket instance for communication.
 * @param {OnMessageHandler} handler The handler function to process incoming events.
 * @returns {UnsubscribeFunction} A function that removes the event listener when called
 */
export function handleOnMessage(socket: Socket, handler: OnMessageHandler): UnsubscribeFunction {
    const listener = async (message: string) => {
        try {
            await handler(socket, message);
        } catch (error) {
            console.error('[onMessage] Handler error:', error);
        }
    };
    socket.on('onMessage', listener);
    const cleanup = () => socket.off('onMessage', listener);
    socket.once('disconnect', cleanup);
    return () => {
        cleanup();
        socket.off('disconnect', cleanup);
    };
}

/**
 * Sets up listener for 'requestConfirmation' events from server with acknowledgment. Returns a function to remove the listener.
 * @param {Socket} socket The socket instance for communication.
 * @param {RequestConfirmationHandler} handler The handler function to process incoming events.
 * @returns {UnsubscribeFunction} A function that removes the event listener when called
 */
export function handleRequestConfirmation(socket: Socket, handler: RequestConfirmationHandler): UnsubscribeFunction {
    const listener = async (prompt: string, callback: (result: boolean | RpcError) => void) => {
        try {
            const result = await handler(socket, prompt);
            callback(result);
        } catch (error) {
            console.error('[requestConfirmation] Handler error:', error);
            callback({ message: error instanceof Error ? error.message : String(error), code: 'INTERNAL_ERROR', data: undefined });
        }
    };
    socket.on('requestConfirmation', listener);
    const cleanup = () => socket.off('requestConfirmation', listener);
    socket.once('disconnect', cleanup);
    return () => {
        cleanup();
        socket.off('disconnect', cleanup);
    };
}

/**
 * Sets up listener for 'rpcError' events with async/await and try-catch. This handler is called whenever an RPC error occurs during function execution. Returns a function to remove the listener.
 * @param {Socket} socket The socket instance for communication.
 * @param {(error: RpcError) => Promise<void>} handler The handler function to process incoming events.
 * @returns {UnsubscribeFunction} A function that removes the event listener when called
 */
export function handleRpcError(socket: Socket, handler: (error: RpcError) => Promise<void>): UnsubscribeFunction {
    const listener = async (error: RpcError) => {
        try {
            await handler(error);
        } catch (handlerError) {
            console.error('[handleRpcError] Error in RPC error handler:', handlerError);
        }
    };
    socket.on('rpcError', listener);
    return () => socket.off('rpcError', listener);
}
