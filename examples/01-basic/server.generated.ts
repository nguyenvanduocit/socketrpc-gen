/**
 * ⚠️  DO NOT EDIT THIS FILE - IT IS AUTO-GENERATED ⚠️
 * 
 * Auto-generated server functions from define.ts
 * These functions allow SERVER to call CLIENT functions (ClientFunctions interface)
 * and set up handlers for SERVER functions (ServerFunctions interface)
 *
 * To regenerate this file, run:
 * bunx socketrpc-gen /Volumes/Data/Projects/socket-rpc/examples/01-basic/define.ts
 */

import type { Socket } from "socket.io";
import type { RpcError, UnsubscribeFunction } from "./types.generated";
import type { User } from "./define";

// === SERVER HANDLER TYPES ===
/** Handler type for processing 'getUser' events from client */
export type GetUserHandler = (socket: Socket, userId: string) => Promise<User | RpcError>;
/** Handler type for processing 'createUser' events from client */
export type CreateUserHandler = (socket: Socket, name: string, email: string) => Promise<User | RpcError>;
/** Handler type for processing 'deleteUser' events from client */
export type DeleteUserHandler = (socket: Socket, userId: string) => Promise<void>;

// === SERVER CALLING CLIENT FUNCTIONS ===
/**
 * SERVER calls CLIENT: Emits 'onMessage' event to client without acknowledgment. Includes built-in error handling.
 * @param {Socket} socket The socket instance for communication.
 * @param {string} message
 */
export function onMessage(socket: Socket, message: string): void {
    socket.emit('onMessage', message);
}

/**
 * SERVER calls CLIENT: Emits 'requestConfirmation' event to client with acknowledgment. Includes built-in error handling.
 * @param {Socket} socket The socket instance for communication.
 * @param {string} prompt
 * @param {number} timeout The timeout for the acknowledgment in milliseconds.
 * @returns {Promise<boolean | RpcError>} A promise that resolves with the result from the client, or an RpcError if one occurred.
 */
export async function requestConfirmation(socket: Socket, prompt: string, timeout: number = 5000): Promise<boolean | RpcError> {
    try {
        return await socket.timeout(timeout).emitWithAck('requestConfirmation', prompt);
    } catch (err) {
        return { message: err instanceof Error ? err.message : String(err), code: 'INTERNAL_ERROR', data: undefined };
    }
}

// === SERVER HANDLER FUNCTIONS ===
/**
 * Sets up listener for 'getUser' events from client with acknowledgment. Returns a function to remove the listener.
 * @param {Socket} socket The socket instance for communication.
 * @param {GetUserHandler} handler The handler function to process incoming events.
 * @returns {UnsubscribeFunction} A function that removes the event listener when called
 */
export function handleGetUser(socket: Socket, handler: GetUserHandler): UnsubscribeFunction {
    const listener = async (userId: string, callback: (result: User | RpcError) => void) => {
        try {
            const result = await handler(socket, userId);
            callback(result);
        } catch (error) {
            console.error('[getUser] Handler error:', error);
            callback({ message: error instanceof Error ? error.message : String(error), code: 'INTERNAL_ERROR', data: undefined });
        }
    };
    socket.on('getUser', listener);
    const cleanup = () => socket.off('getUser', listener);
    socket.once('disconnect', cleanup);
    return () => {
        cleanup();
        socket.off('disconnect', cleanup);
    };
}

/**
 * Sets up listener for 'createUser' events from client with acknowledgment. Returns a function to remove the listener.
 * @param {Socket} socket The socket instance for communication.
 * @param {CreateUserHandler} handler The handler function to process incoming events.
 * @returns {UnsubscribeFunction} A function that removes the event listener when called
 */
export function handleCreateUser(socket: Socket, handler: CreateUserHandler): UnsubscribeFunction {
    const listener = async (name: string, email: string, callback: (result: User | RpcError) => void) => {
        try {
            const result = await handler(socket, name, email);
            callback(result);
        } catch (error) {
            console.error('[createUser] Handler error:', error);
            callback({ message: error instanceof Error ? error.message : String(error), code: 'INTERNAL_ERROR', data: undefined });
        }
    };
    socket.on('createUser', listener);
    const cleanup = () => socket.off('createUser', listener);
    socket.once('disconnect', cleanup);
    return () => {
        cleanup();
        socket.off('disconnect', cleanup);
    };
}

/**
 * Sets up listener for 'deleteUser' events from client. Returns a function to remove the listener.
 * @param {Socket} socket The socket instance for communication.
 * @param {DeleteUserHandler} handler The handler function to process incoming events.
 * @returns {UnsubscribeFunction} A function that removes the event listener when called
 */
export function handleDeleteUser(socket: Socket, handler: DeleteUserHandler): UnsubscribeFunction {
    const listener = async (userId: string) => {
        try {
            await handler(socket, userId);
        } catch (error) {
            console.error('[deleteUser] Handler error:', error);
        }
    };
    socket.on('deleteUser', listener);
    const cleanup = () => socket.off('deleteUser', listener);
    socket.once('disconnect', cleanup);
    return () => {
        cleanup();
        socket.off('disconnect', cleanup);
    };
}

/**
 * Sets up listener for 'rpcError' events with async/await and try-catch. This handler is called whenever an RPC error occurs during function execution. Returns a function to remove the listener.
 * @param {Socket} socket The socket instance for communication.
 * @param {(error: RpcError) => Promise<void>} handler The handler function to process incoming events.
 * @returns {UnsubscribeFunction} A function that removes the event listener when called
 */
export function handleRpcError(socket: Socket, handler: (error: RpcError) => Promise<void>): UnsubscribeFunction {
    const listener = async (error: RpcError) => {
        try {
            await handler(error);
        } catch (handlerError) {
            console.error('[handleRpcError] Error in RPC error handler:', handlerError);
        }
    };
    socket.on('rpcError', listener);
    return () => socket.off('rpcError', listener);
}
